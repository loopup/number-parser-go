trigger: 
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
pool:
   vmImage: 'ubuntu-latest'

steps: 
- task: GoTool@0
  inputs:
    version: '1.23.3'
- task: Go@0
  displayName: 'Resolve dependencies'
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Bash@3
  displayName: Tests
  inputs:
    targetType: inline
    script: |
      # Get tools for converting Go's test reports
      # This will download, build binaries and place them in /home/vsts/go/bin folder
      go install github.com/jstemmer/go-junit-report@latest
      go install github.com/axw/gocov/gocov@latest
      go install github.com/AlekSi/gocov-xml@latest
      
      # Run Go tests and turn output into JUnit test result format
      echo "Run tests output to file"
      go test . -v -coverprofile=coverage.txt -covermode count 2>&1 | /home/vsts/go/bin/go-junit-report > report.xml
      rc=${PIPESTATUS[0]} # Get result code of `go test`
      # Transform the coverage.txt into the format used by Azure pipeline
      /home/vsts/go/bin/gocov convert coverage.txt > coverage.json
      /home/vsts/go/bin/gocov-xml < coverage.json > coverage.xml
  
      echo "Did we get rc==0? rc=$rc"
      # Check if `go test` had an error
      if [ $rc -ne 0 ]; then
        # Let script fail by writing to stderr
        >&2 echo "Tests failed"
      fi

- task: Go@0
  displayName: Fuzz 
  inputs:
    command: 'test'
    arguments: '-v -fuzz=Fuzz -fuzztime 2m'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: JUnit
    testResultsFiles: "*report*.xml"   
    searchFolder: "$(Build.SourcesDirectory)"
    failTaskOnFailedTests: true
    testRunTitle: "Go Tests"
- task: PublishCodeCoverageResults@2
  inputs:
    pathToSources: '$(System.DefaultWorkingDirectory)'
    summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
    failIfCoverageEmpty: true
- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop

     
