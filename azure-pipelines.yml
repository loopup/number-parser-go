trigger: 
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
pool:
   vmImage: 'ubuntu-latest'

steps: 
- task: GoTool@0
  inputs:
    version: '1.23.3'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Bash@3
  displayName: Tests
  inputs:
    targetType: inline
    script: |
      # Get tools for converting Go's test reports
      go install github.com/jstemmer/go-junit-report/v2@latest
      go get -u github.com/jstemmer/go-junit-report
      go get -u github.com/axw/gocov/gocov
      go get -u github.com/AlekSi/gocov-xml
      go env GOMODCACHE
      go env GOPATH
      
      echo "go stuf..."
      ls -lFa '$(GOROOT)/'
      echo "go stuf..moar.."
      ls -lFa /home/vsts/go/pkg/mod
      ls -lFa /home/vsts/go/pkg/mod/github.com/jstemmer/go-junit-report
      
      # Run Go tests and turn output into JUnit test result format
      
      echo "Run tests output to file"
      go test . -v 2>&1 | go-junit-report > report.xml
      echo "Again.."
      go test . -v -coverprofile=coverage.xml -covermode count 2>&1 | /home/vsts/go/pkg/mod/github.com/jstemmer/go-junit-report > report.xml
      rc=${PIPESTATUS[0]} # Get result code of `go test`
      # Show files
      echo "Check if we have files.."
      ls -lFa *.xml
      echo "See contents of file.."
      cat report.xml
      cat coverage.xml
      echo "Did we get rc==0? rc=$rc"
      # Check if `go test` had an error
      if [ $rc -ne 0 ]; then
        # Let script fail by writing to stderr
        >&2 echo "Tests failed"
      fi

- task: Go@0
  displayName: Fuzz 
  inputs:
    command: 'test'
    arguments: '-v -fuzz=Fuzz -fuzztime 2m'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: JUnit
    testResultsFiles: "*report*.xml"   
    searchFolder: "$(Build.SourcesDirectory)"
    failTaskOnFailedTests: true
    testRunTitle: "Go Tests"
- task: PublishCodeCoverageResults@2
  inputs:
   summaryFileLocation: "coverage.xml"
   pathToSources: "$(System.DefaultWorkingDirectory)"
- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop

     
